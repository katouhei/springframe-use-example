<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath*:config/*.properties"></context:property-placeholder>
    <!--    &lt;!&ndash; 还可以是下面方式，加载多个目录中的 &ndash;&gt;-->
    <!--    <context:property-placeholder location="classpath:*.properties,classpath:*/*.properties" />-->


    <!--注册数据源  使用阿里巴巴的druid连接池-->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="5" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="200" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="5" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!-- <property name="poolPreparedStatements" value="true" /> <property
            name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
        <!-- <property name="validationQuery" value="${jdbc.validationQuery}" /> -->
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="mergeStat" /> -->
        <property name="filters" value="stat" />
        <property name="defaultAutoCommit" value="true" />
    </bean>
    <!--注册数据源  使用阿里巴巴的druid连接池-->
    <bean id="masterDataSource" parent="abstractDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

    </bean>

    <!--注册数据源  使用阿里巴巴的druid连接池-->
    <bean id="slaveDataSource" parent="abstractDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.slave.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 配置动态数据源[master,slave 动态数据源中[DynamicDataSource]] -->
    <bean id="dynamicDataSource" class="com.jx.nc.datasource.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
        <property name="targetDataSources">
            <map>
                <!-- value-ref 和 DataSource id 保持一致 -->
                <!-- key DynamicDataSourceHolder 重定义的lookupKey 一致 -->
                <entry value-ref="masterDataSource" key="master" />
                <entry value-ref="slaveDataSource" key="slave" />
            </map>
        </property>
    </bean>

    <!--1.注册事务管理器(需要依赖数据源)-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>

<!--    &lt;!&ndash; JOTM实例 &ndash;&gt;-->
<!--    <bean id="jotm" class="org.springframework.transaction.jta.JotmFactoryBean">-->
<!--        <property name="defaultTimeout" value="500000"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; JTA事务管理器 &ndash;&gt;-->
<!--    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">-->
<!--        <property name="userTransaction" ref="jotm" />-->
<!--    </bean>-->

    <!-- 启用 annotation事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dynamicDataSource" />
    </bean>
    <!--开启组件包扫描-->
    <context:component-scan base-package="com.jx.nc.datasource.aop"/>
    <!--开启切点-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>